// MIR for `range_inclusive_iter_next` after PreCodegen

fn range_inclusive_iter_next(_1: &mut RangeInclusive<u32>) -> Option<u32> {
    debug it => _1;
    let mut _0: std::option::Option<u32>;
    scope 1 (inlined iter::range::<impl Iterator for RangeInclusive<u32>>::next) {
        debug self => _1;
    }

    bb0: {
        _0 = <RangeInclusive<u32> as iter::range::RangeInclusiveIteratorImpl>::spec_next(Spanned { node: move _1, span: $SRC_DIR/core/src/iter/range.rs:LL:COL (#0) }) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
